{"version":3,"sources":["components/Header/index.js","components/DevicesConnected/index.js","store/samples.js","store/ui.js","components/SampleBox/index.js","components/Samples/index.js","logic/instructions.js","store/preparationSteps.js","assets/output.mp4","containers/PrepareSample/index.js","constants/index.js","containers/SampleRequirementForm/index.js","containers/ScanSample/index.js","containers/Activity/index.js","containers/Sections/index.js","containers/Home/index.js","reportWebVitals.js","index.js"],"names":["Header","className","Menu","attached","position","Dropdown","item","icon","Item","memo","DevicesConnected","as","initialState","samples","currentSample","timerMapper","useSampleStore","create","persist","set","setSamples","value","setCurrentSample","setSampleTimer","id","timer","prev","reduceTimerBySecond","name","hasSamplePreparationStarted","startProcessForSamplePreparation","isScanModalOpen","useUIStore","setSamplePreparationStarted","setStartProcessForSamplePreparation","openScanModal","resetUiState","SampleBox","sample","active","useEffect","timerId","setInterval","clearInterval","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","seconds","ceil","padStart","secondsToTime","m","s","displayTimer","Button","size","positive","onClick","Samples","state","map","index","instructions","description","steps","step","length","activeStep","completedSteps","playbackTimes","videoPlaybackPointer","usePreparationStore","setActiveStep","setCompletedSteps","setPlaybackTimes","setVideoPlaybackPointer","resetPreparationState","PrepareSample","videoRef","useRef","useState","isVideoPlaying","setIsVideoPlaying","sampleState","stepName","currentInstruction","controls","ref","onEnded","src","videoSrc","type","includes","current","play","disabled","SampleRequirementForm","testId","setTestId","sampleId","setSampleId","prepKitId","setPrepKitId","cartridgeId","setCartridgeId","createSample","useCallback","shortid","generate","capture","console","log","Input","placeholder","onInput","e","target","onUpdate","err","result","response","text","JSON","parse","ScanSample","uiState","Modal","open","basic","centered","color","Activity","Sections","Home","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb305336.chunk.js","sourcesContent":["import { memo } from \"react\";\r\nimport { Dropdown, Menu } from 'semantic-ui-react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"w-full fixed top-0 h-min-content\">\r\n            <Menu attached='top'>\r\n                <Menu.Menu position='right'>\r\n                    <Dropdown item icon='tasks'>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item>Username</Dropdown.Item>\r\n                            <Dropdown.Item>Change Password</Dropdown.Item>\r\n                            <Dropdown.Item>Logout</Dropdown.Item>\r\n                            <Dropdown.Item>Settings</Dropdown.Item>\r\n                            <Dropdown.Item>Full screen</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Menu>\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Header)","import { memo } from \"react\"\r\nimport { Header } from \"semantic-ui-react\"\r\n\r\nconst DevicesConnected = () => {\r\n    return (\r\n        <div className=\"pt-4 w-1/3 bg-white m-4 text-center rounded px-4\">\r\n            <Header as='h3'>Devices connected</Header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(DevicesConnected)","import create from 'zustand';\r\nimport { persist } from \"zustand/middleware\"\r\n\r\nconst initialState = {\r\n    samples: [],\r\n    currentSample: {},\r\n    timerMapper: {}\r\n}\r\nexport const useSampleStore = create(persist(\r\n    set => ({\r\n        ...initialState,\r\n        setSamples: (value) => set({ samples: value }),\r\n        setCurrentSample: (value) => set({ currentSample: value }),\r\n        setSampleTimer: (id, timer) => set(prev => ({\r\n          timerMapper: {\r\n            ...prev.timerMapper,\r\n            [id]: timer\r\n          }\r\n        })),\r\n        reduceTimerBySecond: (id) => set(prev => ({\r\n          timerMapper: {\r\n            ...prev.timerMapper,\r\n            [id]: prev.timerMapper[id] ? prev.timerMapper[id] - 1 : 0\r\n          }\r\n        })),\r\n    }),\r\n    {\r\n      name: \"samples\"\r\n    }\r\n  ))","import create from 'zustand';\r\nimport { persist } from \"zustand/middleware\"\r\n\r\nconst initialState = {\r\n    hasSamplePreparationStarted: false,\r\n    startProcessForSamplePreparation: false,\r\n    isScanModalOpen: false\r\n}\r\nexport const useUIStore = create(persist(\r\n    set => ({\r\n        ...initialState,\r\n        setSamplePreparationStarted: (value) => set({ hasSamplePreparationStarted: value }),\r\n        setStartProcessForSamplePreparation: (value) => set({ startProcessForSamplePreparation: value }),\r\n        openScanModal: (value) => set({ isScanModalOpen: value }),\r\n        resetUiState: () => set({\r\n          ...initialState\r\n        })\r\n    }),\r\n    {\r\n      name: \"ui\"\r\n    }\r\n  ))","import { useEffect } from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { useSampleStore } from \"../../store/samples\";\r\nimport { useUIStore } from \"../../store/ui\";\r\n\r\nconst SampleBox = ({\r\n    sample,\r\n    active\r\n}) => {\r\n    const { timerMapper, reduceTimerBySecond } = useSampleStore()\r\n    const uiState = useUIStore()\r\n    const { openScanModal } = uiState;\r\n    const secondsToTime = (secs) => {\r\n        const hours = `${Math.floor(secs / (60 * 60))}`;\r\n        const divisor_for_minutes = secs % (60 * 60);\r\n        const minutes = `${Math.floor(divisor_for_minutes / 60)}`;\r\n        const divisor_for_seconds = divisor_for_minutes % 60;\r\n        const seconds = `${Math.ceil(divisor_for_seconds)}`;\r\n        const obj = {\r\n            \"h\": hours.padStart(2, '0'),\r\n            \"m\": minutes.padStart(2, '0'),\r\n            \"s\": seconds.padStart(2, '0')\r\n        };\r\n        return obj;\r\n    };\r\n    const displayTimer = () => {\r\n        let timer = secondsToTime(timerMapper[sample.id]);\r\n        return (`${timer.m}:${timer.s}`)\r\n    };\r\n    useEffect(() => {\r\n        let timerId = null;\r\n        if (timerMapper[sample.id]) {\r\n            timerId = setInterval(() => {\r\n                reduceTimerBySecond(sample.id);\r\n            }, 1000)\r\n        }\r\n        return () => clearInterval(timerId)\r\n    }, [sample.id, timerMapper, reduceTimerBySecond])\r\n\r\n    const openModal = () => {\r\n        openScanModal(true)\r\n    }\r\n\r\n    return (\r\n        <div className=\"my-4 border\">\r\n            <div className={`text-white ${!active ? 'bg-gray-300' : 'bg-success'} p-1 text-sm font-semibold`}>{sample.id}</div>\r\n            {timerMapper[sample.id] !== 0 &&\r\n                <div className=\"p-6\">Time elapsed: {timerMapper[sample.id] ? displayTimer() : 'N/A'}</div>\r\n            }\r\n            {timerMapper[sample.id] === 0 ?\r\n                <div className=\"py-4\">\r\n                    <Button size=\"mini\" positive onClick={openModal}>Scan Sample</Button>\r\n                </div>\r\n                : null\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default SampleBox;","import { memo } from \"react\"\r\nimport { Header } from \"semantic-ui-react\"\r\nimport { useSampleStore } from \"../../store/samples\"\r\nimport SampleBox from \"../SampleBox\";\r\n\r\nconst Samples = () => {\r\n    const state = useSampleStore();\r\n    const { samples, currentSample } = state;\r\n\r\n    return (\r\n        <div className=\"pt-4 px-6 bg-white m-4 text-center w-1/3 rounded px-4\">\r\n            <Header as='h3'>Samples</Header>\r\n            {\r\n                currentSample.id &&\r\n                <SampleBox sample={currentSample} active />\r\n            }\r\n            {\r\n                samples.map((sample, index) => (\r\n                    <SampleBox\r\n                        sample={sample}\r\n                        key={index}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Samples)","export const instructions = {\r\n    \"steps\": [\r\n        {\r\n            \"name\": \"Lysis\",\r\n            \"steps\": [\r\n                {\r\n                    description: \"Open tube 1\",\r\n                },\r\n                {\r\n                    description: \"Open the eNAT tube\",\r\n                },\r\n                {\r\n                    description: \"Collect the sample\",\r\n                },\r\n                {\r\n                    description: \"Close the eNAT tube\",\r\n                },\r\n                {\r\n                    description: \"Close tube 1 with the SmartLid\"\r\n                },\r\n                {\r\n                    description: \"Mix tube 1\",\r\n                },\r\n                {\r\n                    description: \"Capture the beads\",\r\n                },\r\n                {\r\n                    description: \"Dry the beads\",\r\n                },\r\n                {\r\n                    description: \"Insert the smart lid in tube 3\"\r\n                },\r\n                {\r\n                    description: \"Transfer the smart lid to tube 2 Wash\"\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"Wash\",\r\n            \"steps\": [\r\n                {\r\n                    description: \"Mix tube 2\",\r\n                },\r\n                {\r\n                    description: \"Capture the beads\",\r\n                },\r\n                {\r\n                    description: \"Dry the beads\",\r\n                },\r\n                {\r\n                    description: \"Transfer the SmartLid to tube 3\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"Elution\",\r\n            \"steps\": [\r\n                {\r\n                    description: \"Mix tube 3\",\r\n                },\r\n                {\r\n                    description: \"Capture the beads\",\r\n                },\r\n                {\r\n                    description: \"Remove the SmartLid\",\r\n                },\r\n                {\r\n                    description: \"Close tube 3\",\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"Cartridge\",\r\n            \"steps\": [\r\n                {\r\n                    description: \"Transfer the smart lid to tube 2 Wash\"\r\n                },\r\n                {\r\n                    description: \"Transfer the smart lid to tube 2 Wash\"\r\n                },\r\n                {\r\n                    description: \"Transfer the smart lid to tube 2 Wash\"\r\n                },\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const steps = instructions.steps.map((step) => {\r\n    if(step.steps.length)\r\n        return step.name\r\n})\r\n","import create from 'zustand';\r\nimport { persist } from \"zustand/middleware\"\r\n\r\nconst initialState = {\r\n    activeStep: 0,\r\n    completedSteps: [0],\r\n    playbackTimes: 0,\r\n    videoPlaybackPointer: 0\r\n}\r\nexport const usePreparationStore = create(persist(\r\n    set => ({\r\n        ...initialState,\r\n        setActiveStep: (value) => set({ activeStep: value }),\r\n        setCompletedSteps: (value) => set({ completedSteps: value }),\r\n        setPlaybackTimes: (value) => set({ playbackTimes: value }),\r\n        setVideoPlaybackPointer: (value) => set({ videoPlaybackPointer: value }),\r\n        resetPreparationState: () => set({\r\n            ...initialState\r\n        })\r\n    }),\r\n    {\r\n      name: \"preparation-steps\"\r\n    }\r\n  ))","export default __webpack_public_path__ + \"static/media/output.830fa6e0.mp4\";","import { memo, useEffect, useRef, useState } from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { instructions, steps } from \"../../logic/instructions\";\r\nimport { usePreparationStore } from \"../../store/preparationSteps\";\r\nimport videoSrc from \"../../assets/output.mp4\"\r\nimport { useUIStore } from \"../../store/ui\";\r\nimport { useSampleStore } from \"../../store/samples\";\r\nimport { TIMER_SECONDS } from \"../../constants\";\r\n\r\n\r\n\r\nconst PrepareSample = () => {\r\n    const videoRef = useRef(null)\r\n    const [isVideoPlaying, setIsVideoPlaying] = useState(false)\r\n    const state = usePreparationStore()\r\n    const { \r\n        activeStep, \r\n        completedSteps, \r\n        setPlaybackTimes, \r\n        videoPlaybackPointer, \r\n        setVideoPlaybackPointer, \r\n        setCompletedSteps,\r\n        playbackTimes,\r\n        setActiveStep ,\r\n        resetPreparationState\r\n    } = state;\r\n\r\n    const uiState = useUIStore();\r\n    const { resetUiState } = uiState;\r\n    const sampleState = useSampleStore()\r\n    const { samples, currentSample, setSamples, setCurrentSample, setSampleTimer } = sampleState;\r\n    const stepName = steps[activeStep];\r\n    const currentInstruction = instructions.steps[activeStep].steps[videoPlaybackPointer].description\r\n\r\n    useEffect(() => {\r\n        setPlaybackTimes(instructions.steps[activeStep].steps.length - 1)\r\n    }, [setPlaybackTimes, activeStep])\r\n\r\n    const handleVideoEnd = () => setIsVideoPlaying(true);\r\n\r\n    const insertTimerInCurrentSample = () => setSampleTimer(currentSample.id, TIMER_SECONDS);\r\n\r\n    const handleNextVideo = () => {\r\n        setVideoPlaybackPointer(videoPlaybackPointer + 1)\r\n        if(videoPlaybackPointer === playbackTimes) {\r\n            if(activeStep < steps.length - 1) {\r\n                setCompletedSteps([\r\n                    ...completedSteps,\r\n                    activeStep + 1\r\n                ])\r\n\r\n                setActiveStep(activeStep + 1)\r\n            }\r\n            else {\r\n                insertTimerInCurrentSample()\r\n                setSamples([\r\n                    ...samples,\r\n                    currentSample\r\n                ])\r\n                setCurrentSample({})\r\n                resetPreparationState()\r\n                resetUiState()\r\n            }\r\n            setVideoPlaybackPointer(0)\r\n        }\r\n        videoRef.current.play()\r\n        setIsVideoPlaying(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n           <div className=\"text-xs text-white bg-success p-2 flex justify-between items-center font-semibold\">\r\n               <div>{stepName}</div>\r\n               <div>{currentInstruction}</div>\r\n               <div>{currentSample.id}</div>\r\n           </div>\r\n           <div className=\"relative\">\r\n                <video className=\"video\" controls ref={videoRef} onEnded={handleVideoEnd}>\r\n                    <source src={videoSrc} type=\"video/mp4\" />\r\n                </video>\r\n           </div>\r\n           <div className=\"flex\">\r\n                {\r\n                    steps.map((step, index) => (\r\n                        <div key={index} className={`flex-1 text-xs p-1 flex items-center justify-center ${completedSteps.includes(index) ? 'bg-success text-white' : 'text-success'}`}>{step}</div>\r\n                    ))\r\n                }\r\n           </div>\r\n           <div className=\"flex justify-center pt-4\">\r\n                <Button size=\"mini\" positive onClick={handleNextVideo} disabled={!isVideoPlaying}>Next</Button>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(PrepareSample)","export const TIMER_SECONDS = 60*20;","import { memo, useCallback, useState } from \"react\"\r\nimport { Button, Input } from \"semantic-ui-react\"\r\nimport shortid from \"shortid\"\r\nimport { useSampleStore } from \"../../store/samples\";\r\nimport BarcodeScannerComponent from \"react-webcam-barcode-scanner\";\r\n\r\nconst SampleRequirementForm = ({\r\n    setStartProcessForSamplePreparation\r\n}) => {\r\n    const [ testId, setTestId ] = useState(\"\");\r\n    const [ sampleId, setSampleId ] = useState(\"\");\r\n    const [ prepKitId, setPrepKitId ] = useState(\"\");\r\n    const [ cartridgeId, setCartridgeId ] = useState(\"\");\r\n    const state = useSampleStore()\r\n    const { setCurrentSample } = state;\r\n\r\n    const createSample = useCallback(() => {\r\n        const sampleId = shortid.generate();\r\n        const currentSample = {\r\n            id: sampleId\r\n        }\r\n        setCurrentSample(currentSample)\r\n    }, [setCurrentSample])\r\n\r\n    const capture = useCallback(\r\n        () => {\r\n          setStartProcessForSamplePreparation(true)\r\n          createSample()\r\n        },\r\n        [setStartProcessForSamplePreparation, createSample]\r\n    );\r\n\r\n    const handleQRCodeScan = (err, result) => {\r\n        const response = result?.text ? JSON.parse(result?.text) : {};\r\n        if(response?.testId) {\r\n            setTestId(response?.testId)\r\n            setSampleId(response?.sampleId)\r\n            setPrepKitId(response?.prepKitId)\r\n            setCartridgeId(response?.cartridgeId)\r\n        }\r\n    }\r\n    console.log(testId);\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"bg-success text-white p-2 text-left\">\r\n                <h4 className=\"text-white font-semibold\">Sample Prepataion</h4>\r\n            </div>\r\n            <p className=\"pt-4\">Enter the test tracking information by scanning the QR codes, or manually entering the data.</p>\r\n            <div>\r\n                <div className=\"flex mt-4\">\r\n                    <div className=\"m-2 flex flex-col flex-1\">\r\n                        <label className=\"text-xs text-success font-semibold pb-1\">Tested ID</label>\r\n                        <Input placeholder='Tested ID' value={testId} onInput={(e) => {setTestId(e.target.value);}} />\r\n                    </div>\r\n                    <div className=\"m-2 flex flex-col flex-1\">\r\n                        <label className=\"text-xs text-success font-semibold pb-1\">Sample ID</label>\r\n                        <Input placeholder='Sample ID' value={sampleId} onInput={(e) => {setSampleId(e.target.value);}} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <div className=\"m-2 flex flex-col flex-1\">\r\n                        <label className=\"text-xs text-success font-semibold pb-1\">Prep kit ID</label>\r\n                        <Input placeholder='Prep kit ID' value={prepKitId} onInput={(e) => {setPrepKitId(e.target.value);}} />\r\n                    </div>\r\n                    <div className=\"m-2 flex flex-col flex-1\">\r\n                        <label className=\"text-xs text-success font-semibold pb-1\">Cartridge ID</label>\r\n                        <Input placeholder='Cartridge ID' value={cartridgeId} onInput={(e) => {setCartridgeId(e.target.value);}} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <BarcodeScannerComponent \r\n                onUpdate={handleQRCodeScan}\r\n            />\r\n            <div className=\"flex my-4 justify-between\">\r\n                <Button size=\"mini\">Cancel</Button>\r\n                <Button size=\"mini\" positive onClick={capture}>Confirm</Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SampleRequirementForm)","import Webcam from \"react-webcam\"\r\nimport { Button, Modal } from \"semantic-ui-react\"\r\nimport { useUIStore } from \"../../store/ui\"\r\n\r\nconst ScanSample = () => {\r\n    const uiState = useUIStore()\r\n    const { isScanModalOpen, openScanModal } = uiState;\r\n    return(\r\n        <Modal open={isScanModalOpen} basic centered size=\"tiny\">\r\n            <div className=\"bg-white flex justify-center align-center flex-col max-w-max\">\r\n                <div className=\"py-4 text-center bg-success\">Scan Sample</div>\r\n                <div className=\"w-full py-4\">\r\n                    <Webcam />\r\n                </div>\r\n                <div className=\"m-auto pb-4\">\r\n                    <Button onClick={() => openScanModal(false)} basic size=\"tiny\" color=\"red\">Close</Button>\r\n                    <Button basic size=\"tiny\" positive>Scan</Button>\r\n                </div>\r\n\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ScanSample;","import { memo } from \"react\"\r\nimport { Button, Header } from \"semantic-ui-react\"\r\nimport { useUIStore } from \"../../store/ui\"\r\nimport PrepareSample from \"../PrepareSample\";\r\nimport SampleRequirementForm from \"../SampleRequirementForm\";\r\nimport ScanSample from \"../ScanSample\";\r\n\r\nconst Activity = () => {\r\n    const uiState = useUIStore();\r\n    const {\r\n        hasSamplePreparationStarted,\r\n        startProcessForSamplePreparation,\r\n        setStartProcessForSamplePreparation,\r\n        setSamplePreparationStarted,\r\n    } = uiState;\r\n    \r\n    const startPrep = () => {\r\n        setSamplePreparationStarted(true)\r\n    }\r\n\r\n    return (\r\n        <div className=\"pt-4 bg-white m-4 w-1/2 rounded px-4\">\r\n            <Header as='h3' className=\"text-center\">Activity</Header>\r\n            {\r\n                !hasSamplePreparationStarted ?\r\n                    <div className=\"flex justify-center pt-4\">\r\n                        <Button size=\"mini\" positive onClick={startPrep}>Start Sample Preparation</Button>\r\n                    </div>\r\n                    :\r\n                    startProcessForSamplePreparation ? \r\n                        <PrepareSample /> :\r\n                        <SampleRequirementForm\r\n                            setStartProcessForSamplePreparation={setStartProcessForSamplePreparation}\r\n                        />\r\n            }\r\n            <ScanSample />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Activity)","import { memo } from \"react\"\r\nimport DevicesConnected from \"../../components/DevicesConnected\"\r\nimport Samples from \"../../components/Samples\"\r\nimport Activity from \"../Activity\"\r\n\r\n\r\n\r\nconst Sections = () => {\r\n    return (\r\n        <div className=\"flex justify-evenly bg-gray-100 h-full pt-12 min-h-screen\">\r\n            <Samples />\r\n            <Activity />\r\n            <DevicesConnected />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Sections)","import { memo } from \"react\"\r\nimport { MemoryRouter, Route, Switch } from \"react-router\"\r\nimport Header from \"../../components/Header\"\r\nimport Sections from \"../Sections\"\r\n\r\nconst Home = () => {\r\n    return (\r\n        <MemoryRouter>\r\n            <Switch>\r\n                <Route path=\"/\">\r\n                    <Header />\r\n                    <Sections />\r\n                </Route>\r\n            </Switch>\r\n        </MemoryRouter>\r\n    )\r\n}\r\n\r\nexport default memo(Home)","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Home from './containers/Home';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <Home />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}